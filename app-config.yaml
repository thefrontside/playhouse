app:
  title: Frontside Backstage
  baseUrl: http://localhost:3000

organization:
  name: Frontside

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See backend-to-backend-auth.md in the docs for information on the format
  auth:
    keys:
      - secret: backstage_auth_backend_secret
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    img-src: ["'self'", 'https://avatars.githubusercontent.com']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # config options: https://node-postgres.com/api/client
  database:
    client: pg
    connection:
      host: localhost
      port: 5432
      user: postgres
      password: postgres
      # https://node-postgres.com/features/ssl
      # you can set the sslmode configuration option via the `PGSSLMODE` environment variable
      # see https://www.postgresql.org/docs/current/libpq-ssl.html Table 33.1. SSL Mode Descriptions (e.g. require)
      # ssl:
      #   ca: # if you have a CA file and want to verify it you can uncomment this section
      #     $file: <file-path>/ca/server.crt
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
  reading:
    allow:
      - host: localhost:7007

proxy:
  '/test':
    target: 'https://example.com'
    changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

integrations:
  github:
    - host: github.com
      token: ${GITHUB_TOKEN}

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  session:
    secret: backstage_auth_session_secret
  environment: development
  providers:
    auth0:
      development:
        # when using the auth0 simulator, the cert check in backstage needs to be disabled
        # invoke the start command with this env or set it in your shell
        # NODE_EXTRA_CA_CERTS=\"$(mkcert -CAROOT)/rootCA.pem\"
        domain: localhost:4400
        clientId: backstage_auth0_client_id
        clientSecret: backstage_auth0_client_secret
        audience: https://frontside-backstage
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  locations:
    - type: url
      target: https://github.com/thefrontside/playhouse/blob/main/catalog-info.yaml
    - type: file
      target: ../../templates/documentation-onboarding/template.yaml
      rules:
        - allow: [Template]
    - type: file
      target: ../../templates/update-system.yaml
      rules:
        - allow: [Template, System]
    - type: file
      target: ../../templates/standard-microservice/template.yaml
      rules:
        - allow: [Template]

humanitec:
  orgId: the-frontside-software-inc
  registryUrl: us-central1-docker.pkg.dev/frontside-humanitec/frontside-artifacts
  token: ${HUMANITEC_TOKEN}
