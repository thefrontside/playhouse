/* eslint-disable */
import * as Types from "generated/graphql";
import * as gm from "graphql-modules";
export namespace TypedefsModule {
  interface DefinedFields {
    Openapi: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'lifecycle' | 'owner' | 'definition' | 'system' | 'consumers' | 'providers';
    Graphql: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'lifecycle' | 'owner' | 'definition' | 'system' | 'consumers' | 'providers';
    Asyncapi: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'lifecycle' | 'owner' | 'definition' | 'system' | 'consumers' | 'providers';
    Grpc: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'lifecycle' | 'owner' | 'definition' | 'system' | 'consumers' | 'providers';
    Website: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'lifecycle' | 'owner' | 'system' | 'component' | 'subComponents' | 'providesApi' | 'consumesApi' | 'dependencies' | 'parameters' | 'steps' | 'output';
    Service: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'lifecycle' | 'owner' | 'system' | 'component' | 'subComponents' | 'providesApi' | 'consumesApi' | 'dependencies' | 'parameters' | 'steps' | 'output';
    Library: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'lifecycle' | 'owner' | 'system' | 'component' | 'subComponents' | 'providesApi' | 'consumesApi' | 'dependencies';
    Domain: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'owner' | 'systems';
    EntityLink: 'url' | 'title' | 'icon';
    Query: 'entity' | 'node';
    Location: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'type' | 'target' | 'targets';
    Database: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'owner' | 'dependencies' | 'dependents' | 'systems';
    Never: 'id';
    System: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'owner' | 'domain' | 'components' | 'resources';
    Step: 'id' | 'name' | 'action' | 'input' | 'if';
    Documentation: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'parameters' | 'steps' | 'output' | 'owner';
    Team: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'children' | 'displayName' | 'email' | 'picture' | 'parent' | 'members' | 'ownerOf';
    SubDepartment: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'children' | 'displayName' | 'email' | 'picture' | 'parent' | 'members' | 'ownerOf';
    Department: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'children' | 'displayName' | 'email' | 'picture' | 'parent' | 'members' | 'ownerOf';
    Organization: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'children' | 'displayName' | 'email' | 'picture' | 'parent' | 'members' | 'ownerOf';
    User: 'id' | 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links' | 'memberOf' | 'displayName' | 'email' | 'picture' | 'ownerOf';
    API: 'lifecycle' | 'owner' | 'definition' | 'system' | 'consumers' | 'providers';
    Component: 'lifecycle' | 'owner' | 'system' | 'component' | 'subComponents' | 'providesApi' | 'consumesApi' | 'dependencies';
    Entity: 'name' | 'namespace' | 'title' | 'description' | 'tags' | 'links';
    Node: 'id';
    Resource: 'owner' | 'dependencies' | 'dependents' | 'systems';
    Template: 'parameters' | 'steps' | 'output' | 'owner';
    Group: 'children' | 'displayName' | 'email' | 'picture' | 'parent' | 'members' | 'ownerOf';
  };
  
  interface DefinedEnumValues {
    Lifecycle: 'EXPERIMENTAL' | 'PRODUCTION' | 'DEPRECATED';
  };
  
  export type Ownable = Types.Ownable;
  export type Openapi = Pick<Types.Openapi, DefinedFields['Openapi']>;
  export type Graphql = Pick<Types.Graphql, DefinedFields['Graphql']>;
  export type Asyncapi = Pick<Types.Asyncapi, DefinedFields['Asyncapi']>;
  export type Grpc = Pick<Types.Grpc, DefinedFields['Grpc']>;
  export type API = Pick<Types.Api, DefinedFields['API']>;
  export type Lifecycle = DefinedEnumValues['Lifecycle'];
  export type Owner = Types.Owner;
  export type System = Pick<Types.System, DefinedFields['System']>;
  export type Component = Pick<Types.Component, DefinedFields['Component']>;
  export type EntityLink = Pick<Types.EntityLink, DefinedFields['EntityLink']>;
  export type Node = Pick<Types.Node, DefinedFields['Node']>;
  export type Entity = Pick<Types.Entity, DefinedFields['Entity']>;
  export type Website = Pick<Types.Website, DefinedFields['Website']>;
  export type Service = Pick<Types.Service, DefinedFields['Service']>;
  export type Library = Pick<Types.Library, DefinedFields['Library']>;
  export type Dependency = Types.Dependency;
  export type Domain = Pick<Types.Domain, DefinedFields['Domain']>;
  export type Query = Pick<Types.Query, DefinedFields['Query']>;
  export type Location = Pick<Types.Location, DefinedFields['Location']>;
  export type Database = Pick<Types.Database, DefinedFields['Database']>;
  export type Resource = Pick<Types.Resource, DefinedFields['Resource']>;
  export type Never = Pick<Types.Never, DefinedFields['Never']>;
  export type Documentation = Pick<Types.Documentation, DefinedFields['Documentation']>;
  export type Step = Pick<Types.Step, DefinedFields['Step']>;
  export type Template = Pick<Types.Template, DefinedFields['Template']>;
  export type User = Pick<Types.User, DefinedFields['User']>;
  export type Team = Pick<Types.Team, DefinedFields['Team']>;
  export type SubDepartment = Pick<Types.SubDepartment, DefinedFields['SubDepartment']>;
  export type Department = Pick<Types.Department, DefinedFields['Department']>;
  export type Organization = Pick<Types.Organization, DefinedFields['Organization']>;
  export type Group = Pick<Types.Group, DefinedFields['Group']>;
  
  export type Scalars = Pick<Types.Scalars, 'JSON' | 'JSONObject'>;
  export type JsonScalarConfig = Types.JsonScalarConfig;
  export type JsonObjectScalarConfig = Types.JsonObjectScalarConfig;
  
  export type OpenapiResolvers = Pick<Types.OpenapiResolvers, DefinedFields['Openapi'] | '__isTypeOf'>;
  export type GraphqlResolvers = Pick<Types.GraphqlResolvers, DefinedFields['Graphql'] | '__isTypeOf'>;
  export type AsyncapiResolvers = Pick<Types.AsyncapiResolvers, DefinedFields['Asyncapi'] | '__isTypeOf'>;
  export type GrpcResolvers = Pick<Types.GrpcResolvers, DefinedFields['Grpc'] | '__isTypeOf'>;
  export type WebsiteResolvers = Pick<Types.WebsiteResolvers, DefinedFields['Website'] | '__isTypeOf'>;
  export type ServiceResolvers = Pick<Types.ServiceResolvers, DefinedFields['Service'] | '__isTypeOf'>;
  export type LibraryResolvers = Pick<Types.LibraryResolvers, DefinedFields['Library'] | '__isTypeOf'>;
  export type DomainResolvers = Pick<Types.DomainResolvers, DefinedFields['Domain'] | '__isTypeOf'>;
  export type EntityLinkResolvers = Pick<Types.EntityLinkResolvers, DefinedFields['EntityLink'] | '__isTypeOf'>;
  export type QueryResolvers = Pick<Types.QueryResolvers, DefinedFields['Query']>;
  export type LocationResolvers = Pick<Types.LocationResolvers, DefinedFields['Location'] | '__isTypeOf'>;
  export type DatabaseResolvers = Pick<Types.DatabaseResolvers, DefinedFields['Database'] | '__isTypeOf'>;
  export type NeverResolvers = Pick<Types.NeverResolvers, DefinedFields['Never'] | '__isTypeOf'>;
  export type SystemResolvers = Pick<Types.SystemResolvers, DefinedFields['System'] | '__isTypeOf'>;
  export type StepResolvers = Pick<Types.StepResolvers, DefinedFields['Step'] | '__isTypeOf'>;
  export type DocumentationResolvers = Pick<Types.DocumentationResolvers, DefinedFields['Documentation'] | '__isTypeOf'>;
  export type TeamResolvers = Pick<Types.TeamResolvers, DefinedFields['Team'] | '__isTypeOf'>;
  export type SubDepartmentResolvers = Pick<Types.SubDepartmentResolvers, DefinedFields['SubDepartment'] | '__isTypeOf'>;
  export type DepartmentResolvers = Pick<Types.DepartmentResolvers, DefinedFields['Department'] | '__isTypeOf'>;
  export type OrganizationResolvers = Pick<Types.OrganizationResolvers, DefinedFields['Organization'] | '__isTypeOf'>;
  export type UserResolvers = Pick<Types.UserResolvers, DefinedFields['User'] | '__isTypeOf'>;
  export type APIResolvers = Pick<Types.ApiResolvers, DefinedFields['API']>;
  export type ComponentResolvers = Pick<Types.ComponentResolvers, DefinedFields['Component']>;
  export type EntityResolvers = Pick<Types.EntityResolvers, DefinedFields['Entity']>;
  export type NodeResolvers = Pick<Types.NodeResolvers, DefinedFields['Node']>;
  export type ResourceResolvers = Pick<Types.ResourceResolvers, DefinedFields['Resource']>;
  export type TemplateResolvers = Pick<Types.TemplateResolvers, DefinedFields['Template']>;
  export type GroupResolvers = Pick<Types.GroupResolvers, DefinedFields['Group']>;
  
  export interface Resolvers {
    Openapi?: OpenapiResolvers;
    Graphql?: GraphqlResolvers;
    Asyncapi?: AsyncapiResolvers;
    Grpc?: GrpcResolvers;
    Website?: WebsiteResolvers;
    Service?: ServiceResolvers;
    Library?: LibraryResolvers;
    Domain?: DomainResolvers;
    EntityLink?: EntityLinkResolvers;
    Query?: QueryResolvers;
    Location?: LocationResolvers;
    Database?: DatabaseResolvers;
    Never?: NeverResolvers;
    System?: SystemResolvers;
    Step?: StepResolvers;
    Documentation?: DocumentationResolvers;
    Team?: TeamResolvers;
    SubDepartment?: SubDepartmentResolvers;
    Department?: DepartmentResolvers;
    Organization?: OrganizationResolvers;
    User?: UserResolvers;
    JSON?: Types.Resolvers['JSON'];
    JSONObject?: Types.Resolvers['JSONObject'];
  };
  
  export interface MiddlewareMap {
    '*'?: {
      '*'?: gm.Middleware[];
    };
    Openapi?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      lifecycle?: gm.Middleware[];
      owner?: gm.Middleware[];
      definition?: gm.Middleware[];
      system?: gm.Middleware[];
      consumers?: gm.Middleware[];
      providers?: gm.Middleware[];
    };
    Graphql?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      lifecycle?: gm.Middleware[];
      owner?: gm.Middleware[];
      definition?: gm.Middleware[];
      system?: gm.Middleware[];
      consumers?: gm.Middleware[];
      providers?: gm.Middleware[];
    };
    Asyncapi?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      lifecycle?: gm.Middleware[];
      owner?: gm.Middleware[];
      definition?: gm.Middleware[];
      system?: gm.Middleware[];
      consumers?: gm.Middleware[];
      providers?: gm.Middleware[];
    };
    Grpc?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      lifecycle?: gm.Middleware[];
      owner?: gm.Middleware[];
      definition?: gm.Middleware[];
      system?: gm.Middleware[];
      consumers?: gm.Middleware[];
      providers?: gm.Middleware[];
    };
    Website?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      lifecycle?: gm.Middleware[];
      owner?: gm.Middleware[];
      system?: gm.Middleware[];
      component?: gm.Middleware[];
      subComponents?: gm.Middleware[];
      providesApi?: gm.Middleware[];
      consumesApi?: gm.Middleware[];
      dependencies?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      parameters?: gm.Middleware[];
      steps?: gm.Middleware[];
      output?: gm.Middleware[];
      owner?: gm.Middleware[];
    };
    Service?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      lifecycle?: gm.Middleware[];
      owner?: gm.Middleware[];
      system?: gm.Middleware[];
      component?: gm.Middleware[];
      subComponents?: gm.Middleware[];
      providesApi?: gm.Middleware[];
      consumesApi?: gm.Middleware[];
      dependencies?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      parameters?: gm.Middleware[];
      steps?: gm.Middleware[];
      output?: gm.Middleware[];
      owner?: gm.Middleware[];
    };
    Library?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      lifecycle?: gm.Middleware[];
      owner?: gm.Middleware[];
      system?: gm.Middleware[];
      component?: gm.Middleware[];
      subComponents?: gm.Middleware[];
      providesApi?: gm.Middleware[];
      consumesApi?: gm.Middleware[];
      dependencies?: gm.Middleware[];
    };
    Domain?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      owner?: gm.Middleware[];
      systems?: gm.Middleware[];
    };
    EntityLink?: {
      '*'?: gm.Middleware[];
      url?: gm.Middleware[];
      title?: gm.Middleware[];
      icon?: gm.Middleware[];
    };
    Query?: {
      '*'?: gm.Middleware[];
      entity?: gm.Middleware[];
      node?: gm.Middleware[];
    };
    Location?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      type?: gm.Middleware[];
      target?: gm.Middleware[];
      targets?: gm.Middleware[];
    };
    Database?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      owner?: gm.Middleware[];
      dependencies?: gm.Middleware[];
      dependents?: gm.Middleware[];
      systems?: gm.Middleware[];
    };
    Never?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
    };
    System?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      owner?: gm.Middleware[];
      domain?: gm.Middleware[];
      components?: gm.Middleware[];
      resources?: gm.Middleware[];
    };
    Step?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      action?: gm.Middleware[];
      input?: gm.Middleware[];
      if?: gm.Middleware[];
    };
    Documentation?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      parameters?: gm.Middleware[];
      steps?: gm.Middleware[];
      output?: gm.Middleware[];
      owner?: gm.Middleware[];
    };
    Team?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      children?: gm.Middleware[];
      displayName?: gm.Middleware[];
      email?: gm.Middleware[];
      picture?: gm.Middleware[];
      parent?: gm.Middleware[];
      members?: gm.Middleware[];
      ownerOf?: gm.Middleware[];
    };
    SubDepartment?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      children?: gm.Middleware[];
      displayName?: gm.Middleware[];
      email?: gm.Middleware[];
      picture?: gm.Middleware[];
      parent?: gm.Middleware[];
      members?: gm.Middleware[];
      ownerOf?: gm.Middleware[];
    };
    Department?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      children?: gm.Middleware[];
      displayName?: gm.Middleware[];
      email?: gm.Middleware[];
      picture?: gm.Middleware[];
      parent?: gm.Middleware[];
      members?: gm.Middleware[];
      ownerOf?: gm.Middleware[];
    };
    Organization?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      children?: gm.Middleware[];
      displayName?: gm.Middleware[];
      email?: gm.Middleware[];
      picture?: gm.Middleware[];
      parent?: gm.Middleware[];
      members?: gm.Middleware[];
      ownerOf?: gm.Middleware[];
    };
    User?: {
      '*'?: gm.Middleware[];
      id?: gm.Middleware[];
      name?: gm.Middleware[];
      namespace?: gm.Middleware[];
      title?: gm.Middleware[];
      description?: gm.Middleware[];
      tags?: gm.Middleware[];
      links?: gm.Middleware[];
      memberOf?: gm.Middleware[];
      displayName?: gm.Middleware[];
      email?: gm.Middleware[];
      picture?: gm.Middleware[];
      ownerOf?: gm.Middleware[];
    };
  };
}